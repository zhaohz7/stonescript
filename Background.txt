// Press 'X' to leave

// snow particle variables
var p_snow = []
var p_snowBig = []
var p_x = 0
var p_y = 0
var snowBig = False

//cloud variables
var x_c1 = 0
var x_c2 = 0
var x_c3 = 0
var x_c4 = 0
var x_c5 = 0

var w_c1 = 44
var w_c2 = 54
var w_c34 = 79
var w_c5  = 49

//global timer
var gt_1t = 0



//main functions
Dunutpolis()
Update()
Draw()


func Update()
  //leave if 'X' is pressed
  ?key = backBegin
    loc.Leave()
  
  //increment global timer
  gt_1t++
  
  //scroll clouds
  ?(gt_1t % 30) = 0
    x_c5--
    ?x_c5 < -w_c5
      x_c5 = x_c5 + w_c5

  ?(gt_1t % 10) = 0
    x_c4--
    ?x_c4 < -w_c34
      x_c4 = x_c4 + w_c34

  ?(gt_1t % 5) = 0
    x_c3--
    ?x_c3 < -w_c34
      x_c3 = x_c3 + w_c34

  ?(gt_1t % 4) = 0
    x_c2--
    ?x_c2 < -w_c2
      x_c2 = x_c2 + w_c2

  ?(gt_1t % 2) = 0
    x_c1--
    ?x_c1 < -w_c1
      x_c1 = x_c1 + w_c1

  // generate snow particles
  snowBig = false
  
  //select top/side
  ?rng % 2 = 0
    p_x = rng % screen.w
    p_y = 0
  :
    snowBig = (rng%5 = 0)
    p_x = screen.w-1
    p_y = rng % screen.h
  
  // add particle
  ?snowBig
    p_snowBig.Add( [p_x,p_y] )
  :
    p_snow.Add( [p_x,p_y] )
  
  // remove excess snow
  ?p_snow.Count() > 20
    p_snow.RemoveAt(0)
  
  ?p_snowBig.Count() > 5
    p_snowBig.RemoveAt(0)

func Draw()
  draw.Clear()
  DrawClouds(0, 18, 0)
  DrawUpdateSnow()



func DrawUpdateSnow()
  for p : p_snow
    p[0] = p[0]-3
    p[1] = p[1]+1
    
    p_x = p[0]
    p_y = p[1]
    >`@p_x@,@p_y@,#DDDDDD,.
    //·
  
  for p : p_snowBig
    p[0] = p[0]-4
    p[1] = p[1]+1
    
    p_x = p[0]
    p_y = p[1]
    >`@p_x@,@p_y@,#DDDDDD,❄

func DrawClouds(cx, cy, cs)
  DrawClouds5(cx+x_c5,         cy, #444444)
  DrawClouds5(cx+x_c5+ w_c5,   cy, #444444)
  DrawClouds5(cx+x_c5+ 2*w_c5, cy, #444444)
  
  DrawClouds34(cx+x_c4,          cy+cs+1, #444444)
  DrawClouds34(cx+x_c4+ w_c34,   cy+cs+1, #444444)
  DrawClouds34(cx+x_c4+ 2*w_c34, cy+cs+1, #444444)
  
  DrawClouds34(cx+x_c3,          cy+2*cs+3, #444444)
  DrawClouds34(cx+x_c3+ w_c34,   cy+2*cs+3, #444444)
  DrawClouds34(cx+x_c3+ 2*w_c34, cy+2*cs+3, #444444)
  
  DrawClouds2(cx+x_c2,         cy+3*cs+4, #444444)
  DrawClouds2(cx+x_c2+ w_c2,   cy+3*cs+4, #444444)
  DrawClouds2(cx+x_c2+ 2*w_c2, cy+3*cs+4, #444444)
  
  DrawClouds1(cx+x_c1,         cy+4*cs+7, #444444)
  DrawClouds1(cx+x_c1+ w_c1,   cy+4*cs+7, #444444)
  DrawClouds1(cx+x_c1+ 2*w_c1, cy+4*cs+7, #444444)

func DrawClouds5(cx, cy, color)
  >`@cx@,@cy@,@color@,ascii
 -- __ - -- _ -- __ -- _ -- - _ -- __ - __ _ - __
asciiend

func DrawClouds34(cx, cy, color)
  >`@cx@,@cy@,@color@,ascii
  -.-.  ,-,- ──.  ,- ── -.  ,-,──. ,─,─  -──.-.  ,──,── -.-.  ,-,- ──. ,─ ── ─.
asciiend

func DrawClouds2(cx, cy, color)
  >`@cx@,@cy@,@color@,ascii
   _,-.__    _,--._    _,-.    _ ,-,--._    _,-._,-._ 
  ( (‾   )  (  ‾‾  )  ( (‾‾)  ( (‾ ‾‾‾) )  ( ‾(‾  ‾) )
asciiend

func DrawClouds1(cx, cy, color)
  >`@cx@,@cy@,@color@,ascii
   ,( ‾)_    (‾),     ,-(‾ )      _,(‾‾)‾)
  (‾  ‾) )  (‾( ‾)  (‾(‾   ‾)‾)  (  (   ‾)‾)
asciiend
func Dunutpolis()
  >`@screen.w/2-10@,@screen.h/2-8@,ascii
          ____
     .--"      "-- .
   .'     . ;        `.
  /      : . '  :      \
 '     ´   .-. .  `     '
|    :    (   )   ; `   |
 .    :    `-'    :     .
  .    .`   ;   :      .
   \                  /
     `.    . '     .´
       `--.____.--'
asciiend